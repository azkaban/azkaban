/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package trigger.kafka;  
@SuppressWarnings("all")
public class CustomizedSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CustomizedSchema\",\"namespace\":\"trigger.kafka\",\"fields\":[{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"useragent\",\"type\":\"string\"},{\"name\":\"sessionid\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  @Deprecated public java.lang.CharSequence ip;
  @Deprecated public long timestamp;
  @Deprecated public java.lang.CharSequence url;
  @Deprecated public java.lang.CharSequence useragent;
  @Deprecated public java.lang.Integer sessionid;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ip;
    case 1: return timestamp;
    case 2: return url;
    case 3: return useragent;
    case 4: return sessionid;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ip = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.lang.Long)value$; break;
    case 2: url = (java.lang.CharSequence)value$; break;
    case 3: useragent = (java.lang.CharSequence)value$; break;
    case 4: sessionid = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ip' field.
   */
  public java.lang.CharSequence getIp() {
    return ip;
  }

  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.CharSequence value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'useragent' field.
   */
  public java.lang.CharSequence getUseragent() {
    return useragent;
  }

  /**
   * Sets the value of the 'useragent' field.
   * @param value the value to set.
   */
  public void setUseragent(java.lang.CharSequence value) {
    this.useragent = value;
  }

  /**
   * Gets the value of the 'sessionid' field.
   */
  public java.lang.Integer getSessionid() {
    return sessionid;
  }

  /**
   * Sets the value of the 'sessionid' field.
   * @param value the value to set.
   */
  public void setSessionid(java.lang.Integer value) {
    this.sessionid = value;
  }

  /** Creates a new CustomizedSchema RecordBuilder */
  public static trigger.kafka.CustomizedSchema.Builder newBuilder() {
    return new trigger.kafka.CustomizedSchema.Builder();
  }
  
  /** Creates a new CustomizedSchema RecordBuilder by copying an existing Builder */
  public static trigger.kafka.CustomizedSchema.Builder newBuilder(trigger.kafka.CustomizedSchema.Builder other) {
    return new trigger.kafka.CustomizedSchema.Builder(other);
  }
  
  /** Creates a new CustomizedSchema RecordBuilder by copying an existing CustomizedSchema instance */
  public static trigger.kafka.CustomizedSchema.Builder newBuilder(trigger.kafka.CustomizedSchema other) {
    return new trigger.kafka.CustomizedSchema.Builder(other);
  }
  
  /**
   * RecordBuilder for CustomizedSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CustomizedSchema>
    implements org.apache.avro.data.RecordBuilder<CustomizedSchema> {

    private java.lang.CharSequence ip;
    private long timestamp;
    private java.lang.CharSequence url;
    private java.lang.CharSequence useragent;
    private java.lang.Integer sessionid;

    /** Creates a new Builder */
    private Builder() {
      super(trigger.kafka.CustomizedSchema.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(trigger.kafka.CustomizedSchema.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing CustomizedSchema instance */
    private Builder(trigger.kafka.CustomizedSchema other) {
            super(trigger.kafka.CustomizedSchema.SCHEMA$);
      if (isValidValue(fields()[0], other.ip)) {
        this.ip = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.ip);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = (java.lang.Long) data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.url)) {
        this.url = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.url);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.useragent)) {
        this.useragent = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.useragent);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sessionid)) {
        this.sessionid = (java.lang.Integer) data().deepCopy(fields()[4].schema(), other.sessionid);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'ip' field */
    public java.lang.CharSequence getIp() {
      return ip;
    }
    
    /** Sets the value of the 'ip' field */
    public trigger.kafka.CustomizedSchema.Builder setIp(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ip = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'ip' field has been set */
    public boolean hasIp() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'ip' field */
    public trigger.kafka.CustomizedSchema.Builder clearIp() {
      ip = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public trigger.kafka.CustomizedSchema.Builder setTimestamp(long value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'timestamp' field */
    public trigger.kafka.CustomizedSchema.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'url' field */
    public java.lang.CharSequence getUrl() {
      return url;
    }
    
    /** Sets the value of the 'url' field */
    public trigger.kafka.CustomizedSchema.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.url = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'url' field has been set */
    public boolean hasUrl() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'url' field */
    public trigger.kafka.CustomizedSchema.Builder clearUrl() {
      url = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'useragent' field */
    public java.lang.CharSequence getUseragent() {
      return useragent;
    }
    
    /** Sets the value of the 'useragent' field */
    public trigger.kafka.CustomizedSchema.Builder setUseragent(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.useragent = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'useragent' field has been set */
    public boolean hasUseragent() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'useragent' field */
    public trigger.kafka.CustomizedSchema.Builder clearUseragent() {
      useragent = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'sessionid' field */
    public java.lang.Integer getSessionid() {
      return sessionid;
    }
    
    /** Sets the value of the 'sessionid' field */
    public trigger.kafka.CustomizedSchema.Builder setSessionid(java.lang.Integer value) {
      validate(fields()[4], value);
      this.sessionid = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'sessionid' field has been set */
    public boolean hasSessionid() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'sessionid' field */
    public trigger.kafka.CustomizedSchema.Builder clearSessionid() {
      sessionid = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public CustomizedSchema build() {
      try {
        CustomizedSchema record = new CustomizedSchema();
        record.ip = fieldSetFlags()[0] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.url = fieldSetFlags()[2] ? this.url : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.useragent = fieldSetFlags()[3] ? this.useragent : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.sessionid = fieldSetFlags()[4] ? this.sessionid : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
